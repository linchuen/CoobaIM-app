/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.1
 * source: chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChatInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uuid?: string;
        id?: number;
        name?: string;
        roomId?: number;
        userId?: number;
        message?: string;
        url?: string;
        type?: string;
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uuid" in data && data.uuid != undefined) {
                this.uuid = data.uuid;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("roomId" in data && data.roomId != undefined) {
                this.roomId = data.roomId;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get uuid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uuid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get roomId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set roomId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        uuid?: string;
        id?: number;
        name?: string;
        roomId?: number;
        userId?: number;
        message?: string;
        url?: string;
        type?: string;
        success?: boolean;
    }): ChatInfo {
        const message = new ChatInfo({});
        if (data.uuid != null) {
            message.uuid = data.uuid;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.roomId != null) {
            message.roomId = data.roomId;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            uuid?: string;
            id?: number;
            name?: string;
            roomId?: number;
            userId?: number;
            message?: string;
            url?: string;
            type?: string;
            success?: boolean;
        } = {};
        if (this.uuid != null) {
            data.uuid = this.uuid;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.roomId != null) {
            data.roomId = this.roomId;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uuid.length)
            writer.writeString(1, this.uuid);
        if (this.id != 0)
            writer.writeInt32(2, this.id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.roomId != 0)
            writer.writeInt32(4, this.roomId);
        if (this.userId != 0)
            writer.writeInt32(5, this.userId);
        if (this.message.length)
            writer.writeString(6, this.message);
        if (this.url.length)
            writer.writeString(7, this.url);
        if (this.type.length)
            writer.writeString(8, this.type);
        if (this.success != false)
            writer.writeBool(9, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uuid = reader.readString();
                    break;
                case 2:
                    message.id = reader.readInt32();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.roomId = reader.readInt32();
                    break;
                case 5:
                    message.userId = reader.readInt32();
                    break;
                case 6:
                    message.message = reader.readString();
                    break;
                case 7:
                    message.url = reader.readString();
                    break;
                case 8:
                    message.type = reader.readString();
                    break;
                case 9:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatInfo {
        return ChatInfo.deserialize(bytes);
    }
}
